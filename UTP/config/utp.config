### This is the config file for utp.py and FqC.py.
### Here, you can specify arguments for the incorporated software that you want to include
### in your run. Keep in mind that the pipeline is not built with every possible configuration
### of arguments possible. Things may break. Here be dragons.
### For each programme, there is a line reserved for additional arguments that is simply pasted
### into the command line when running the respective programme. If this would generate
### additional output, please include the path to where you want that to go. Also make sure that,
### if you add additional tags, everything is on a single line.
### This config also specifies where some software executables can be found if they are not
### in your PATH.

### Theoretically, you can add and remove comment lines to your hearts desire. However, removing
### lines is not recommended, mostly for your own sake. If you want to add your own comments,
### start the line with one or more hastags '#' so the line is ignored by the scripts.

### How to change the configuration:
### 1. COPY this file to where you want your config to be.
### 2. Find the line for the software that you want to change in configuration.
### 3. Add the options as listed for the software as if you were to put it into the command line.
###    Essential options like input files are already taken care of by the script.
###    Note: DO NOT delete the tag and the '~' following it.
### 4. Save this file.
### 5. Specify the path to this file in the script using the --config option.



# cleaning script:
#   FastQC
### FastQC executable:
fastqc_executable~fastqc
### by default, the script will look for fastqc as a global variable. If you use a local installation, replace it with
### ./path/to/fastqc
### FastQC arguments:
fastqc_arguments~
### FastQC options covered in the script:
### --output, --dir, --threads, --extract
### (likely) incompatible options:
### --format, --noextract

#   MultiQC
### MultiQC executable:
multiqc_executable~multiqc
### by default, the script will look for multiqc as a global variable. If you use a local installation, replace it with
### ./path/to/multiqc
### MultiQC arguments:
multiqc_arguments~--force
### MultiQC arguments covered in the script:
### -n (name)
### (likely) incompatible options:
###

#   trimmomatic
### trimmomatic executable:
trimmomatic_executable~java -jar /hpc/local/CentOS7/uu_bio_fg/software/Trimmomatic-0.39/trimmomatic-0.39.jar
### ^ in this line, java arguments can also be added.
### by default, the script will look for trimmomatic through a path. Please modify the path if you have trimmomatic installed
### elsewhere, or change it to a global variable if applicable
### trimmomatic arguments:
trimmomatic_phred~-phred33
### ^ due to the way trimmomatic works, this one needs to be specified separately. If you are working with (very) old files, you
### can change it to -phred64
trimmomatic_arguments~ILLUMINACLIP:software/Trimmomatic-0.39/adapters/TruSeq2-PE.fa:2:30:10 SLIDINGWINDOW:4:18 MINLEN:32
### NOTE: ILLUMINACLIP flag is mandatory. Before using, please change the path to the location of adapter sequences on your machine
### trimmomatic options covered in the script:
### -threads, -summary
### (likely) incompatible options:
### -trimlog



# main pipeline
#   gffread
### gffread executable:
gffread_executable~gffread
### by default, the script will look for gffread as a global executable in your path. If you use a local installation, replace it with
### ./path/to/gffread
### gffread arguments:
gffread_arguments~
### gffread options covered in the script:
### --gtf, -o, -F
### (likely) incompatible options:
### --bed, --gff (output needs to be gtf for STAR)

#   STAR
### STAR executable:
STAR_executable~STAR
### by default, the script will look for STAR as a global executable in your path. If you use a local installation, replace it with
### ./path/to/STAR
### STAR arguments:
STAR_index_arguments~
STAR_align_arguments~
### STAR options covered in the script:
### index: --runMode, --runThreadN, --genomeDir, --genomeFastaFiles, --sjdbGTFfile
### align: --runThreadN, --genomeDir, --readFilesIn, --outTmpDir, --outFileNamePrefix, --outSAMtype,
### (likely) incompatible options:
### any flag that would generate additional output is risky.

#   samtools
### samtools executable:
samtools_executable~samtools
### by default, the script will look for samtools as a global executable in your path. If you use a local installation, replace it with
### ./path/to/samtools
### samtools arguments:
samtools_index_arguments~
samtools_view_arguments~
samtools_sort_arguments~
### samtools options covered in the script:
### index:
### view:
### sort:
### reheader:
### (likely) incompatible options:
###

#	Picard
### picard executable:
picard_executable~java -Xmx28g -jar /hpc/local/CentOS7/uu_bio_fg/picard/picard.jar
### ^ in this line, you can add your java arguments
### by default, the script will look for picard through a path. Please modify the path if you have picard installed
### elsewhere, or change it to a global variable if applicable.
### picard arguments:
picard_mdpl_arguments~REMOVE_DUPLICATES=true
picard_casm_arguments~
### picard options covered in the script:
### INPUT, OUTPUT, METRICS, REFERENCE
### (likely) incompatible options:
### REMOVE_SEQUENCING_DUPLICATES
### It is not recommended to not remove duplicates (REMOVE_DUPLICATES=false), but it may be possible

#	featurecounts
### featurecounts executable:
featurecounts_executable~featureCounts
### by default, the script will look for featurecounts as a global executable in your path. If you use a local installation, replace it with
### ./path/to/featurecounts
#### featurecounts arguments:
featurecounts_arguments~-t transcript
### featurecounts options covered in the script:
### -p (if paired-end), -T, --tmpDir, -a, -o, -f
### (likely) incompatible options:
###

#	bedtools
### bedtools executable:
bedtools_executable~bedtools
### by default, the script will look for bedtools as a global executable in your path. If you use a local installation, replace it with
### ./path/to/bedtools
### bedtools arguments:
### bedtools bedtobam has no extra arguments that can be used that wouldn't break the pipeline
### bedtools options covered in the script:
### -i, -g
### (likely) incompatible options:
###
